{{#partial "formulario"}}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <div id="form5" class="formulario">
        <h4>Registrar Persona Vulnerable</h4>
        {{!-- <form method="POST" action="/colaboraciones/formulario/registrar_vulnerable" id="miFormulario"> --}}
        <form id="registrar_persona_vulnerable">
            <div class="row mb-3">
                <div class="col">
                    <div class="form-group">
                        <label for="nombre">Nombre</label>
                        <input type="text" class="form-control" id="nombre" name="nombre" required>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="fecha_nac">Fecha de nacimiento</label>
                        <input type="date" class="form-control" id="fecha_nac" name="fecha_nac"
                               required>
                    </div>
                </div>
            </div>

            <h5 class="mb-3">En caso de poseer domicilio</h5>
            <!-- Toggle para Dirección -->
            <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="toggleDireccion">
                <label class="form-check-label" for="toggleDireccion">¿Quiere ingresar
                    dirección?</label>
            </div>
            <div id="domicilio_container" style="display: none;">
                <div class="row mb-3">
                    <div class="col">
                        <div class="form-group">
                            <label for="calle">Calle</label>
                            <input type="text" class="form-control" id="calle" name="calle">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="altura">Altura</label>
                            <input type="text" class="form-control" id="altura" name="altura">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="provincia">Provincia</label>
                            <select class="form-select" aria-label="contribucion" id="provincia"
                                    name="provincia"
                                    onchange="cargarLocalidades()">
                                <option value="" selected disabled>Seleccione una provincia
                                </option>
                                {{#each provincias}}
                                    <option value="{{this.nombre}}">
                                        {{this.nombre}}
                                    </option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="localidad">Localidad</label>
                            <input type="text" class="form-control" id="localidad" name="localidad">
                        </div>
                    </div>
                </div>
                <div style="position: relative;">
                    <div id="map-container" style="height: 50vh; width: 100%;"></div>
                    <div id="ubicacion_info"
                         style="background-color: white; position:absolute; top: 10px; right: 10px; padding: 16px; border-radius: 5px; z-index: 999;">
                    </div>
                    <p>Corrobore la ubicación en el mapa antes de enviar el formulario</p>
                </div>
                <button type="button" class="btn btn-dark"
                        onclick="fetchUbicacion('registrar_persona_vulnerable')">
                    Corroborar
                </button>
            </div>

            <h5 class="mb-3">En caso de poseer documento</h5>
            <!-- Toggle para Documento -->
            <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="toggleDocumento">
                <label class="form-check-label" for="toggleDocumento">¿Quiere ingresar
                    documento?</label>
            </div>
            <div id="documento_container" style="display: none;">
                <div class="row mb-3">
                    <div class="col">
                        <div class="form-group mb-3">
                            <label for="tipo-documento">Tipo de documento</label>
                            <select class="form-select" aria-label="tipo-documento"
                                    name="tipo_docu">
                                <option value="" selected disabled>Seleccione una opción</option>
                                {{#each tiposDocumento}}
                                    <option value="{{valor}}">{{descripcion}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="numero_docu">Número de documento</label>
                            <input type="text" class="form-control" id="numero_docu"
                                   name="numero_docu">
                        </div>
                    </div>
                </div>
            </div>
            <h5 class="mb-3">En caso de ser hijo de alguien ya registrado</h5>
            <!-- Toggle para Padre -->
            <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="togglePadre">
                <label class="form-check-label" for="togglePadre">¿Tiene padre?</label>
            </div>
            <div class="row mb-3" id="select_padre_container" style="display: none;">
                <div class="col">
                    <div class="form-group">
                        <label for="padre_id">Seleccionar padre</label>
                        <select class="form-select" id="padre_id" name="padre_id">
                            <option value="" disabled selected>Seleccione un padre</option>
                            {{#each personasVulnerables}}
                                <option value="{{this.id}}">
                                    {{this.nombre}} ({{this.numeroDocumento}})
                                </option>
                            {{/each}}
                        </select>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-dark"
                    onclick="handleFormRegistrarPersonaVulnerable('registrar_persona_vulnerable')">
                Enviar
            </button>
        </form>
    </div>
{{/partial}}
{{#partial "scripts"}}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        let map = L.map('map-container').setView([-34.603722, -58.381592], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);


        let ubicacion = null;

        async function obtenerCoordenadas(direccion) {
            const apiKey = "AIzaSyBWSEuIHch9iocb6VWOFh4amqcTgM0wxQs";
            const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(direccion)}&key=${apiKey}`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`Error en la solicitud: ${response.status}`);
                }
                const data = await response.json();
                if (data.status === "OK") {
                    const resultados = data.results[0];
                    console.log(resultados)
                    const {lat, lng} = resultados.geometry.location;
                    return {
                        coords: {lat, lng},
                        street_number: resultados.address_components.find(component => component.types.includes('street_number'))?.long_name || null,
                        address: resultados.address_components.find(component => component.types.includes('route'))?.long_name || null,
                        postal_code: resultados.address_components.find(component => component.types.includes('postal_code'))?.long_name || null,
                        locality: resultados.address_components.find(component => component.types.includes('sublocality_level_1') || component.types.includes('locality'))?.long_name || null,
                        city: resultados.address_components.find(component => component.types.includes('locality'))?.long_name || null,
                        province: resultados.address_components.find(component => component.types.includes('administrative_area_level_1'))?.long_name || null,
                        country: resultados.address_components.find(component => component.types.includes('country'))?.long_name || null,
                    };

                } else {
                    throw new Error(`No se pudo obtener coordenadas: ${data.status}`);
                }
            } catch (error) {
                console.error("Error al obtener coordenadas:", error);
                return null;
            }
        }

        function fetchUbicacion(formId) {
            const formulario = document.getElementById(formId);
            const calle = formulario.calle.value;
            const altura = formulario.altura.value;
            const localidad = formulario.localidad.value;
            const provincia = formulario.provincia.value;

            const direccion = `${calle} ${altura} ${localidad} ${provincia}`;

            obtenerCoordenadas(direccion).then((obj) => {
                if (obj) {
                    console.log(obj);

                    //eliminamos el marcador anterior
                    map.eachLayer((layer) => {
                        if (layer instanceof L.Marker) {
                            map.removeLayer(layer);
                        }
                    });

                    const {coords} = obj;
                    map.setView([coords.lat, coords.lng], 15);
                    L.marker([coords.lat, coords.lng]).addTo(map);
                    //document.getElementById('sendPersonaJuridica').disabled = false;
                    const ubicacionInfo = document.getElementById('ubicacion_info');
                    ubicacionInfo.innerHTML = `
                    <p>Dirección: ${obj.address || 'Desconocida'} ${obj.street_number || ''}</p>
                    <p>Código Postal: ${obj.postal_code || 'Desconocido'}</p>
                    <p>Ciudad: ${obj.city || 'Desconocida'}</p>
                    <p>Localidad: ${obj.locality || 'Desconocida'}</p>
                    <p>Provincia: ${obj.province}</p>
                    <p>País: ${obj.country}</p>
                `;
                    ubicacion = obj;

                }
            });
        }

        function handleFormRegistrarPersonaVulnerable(formId) {
            const formulario = document.getElementById(formId);
            let isValid = true;

            const requiredFields = formulario.querySelectorAll('[required]');
            requiredFields.forEach(field => field.setCustomValidity(''));

            for (const field of requiredFields) {
                if (!field.value) {
                    isValid = false; // Si hay algún campo requerido vacío
                    field.setCustomValidity('Este campo es requerido.'); // Mensaje personalizado
                    field.reportValidity(); // Mostrar mensaje de validación del navegador
                }
            }

            if (!ubicacion && formulario.toggleDireccion.checked) {
                isValid = false;
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Debe corroborar la ubicación en el mapa antes de enviar el formulario",
                });
            }

            if (isValid) {
                const formData = new FormData();

                formData.append('nombre', formulario.nombre.value);
                formData.append('fecha_nac', formulario.fecha_nac.value);

                formData.append('tipo_docu', formulario.tipo_docu?.value || '');
                formData.append('numero_docu', formulario.numero_docu?.value || '');

                formData.append('padre_id', formulario.padre_id?.value || '');

                if (ubicacion) {
                    formData.append('calle', ubicacion.address);
                    formData.append('altura', ubicacion.street_number);
                    formData.append('ciudad', ubicacion.city);
                    formData.append('localidad', ubicacion.locality);
                    formData.append('provincia', formulario.provincia.value);
                    formData.append('codigoPostal', ubicacion.postal_code);
                    formData.append('latitud', ubicacion.coords.lat);
                    formData.append('longitud', ubicacion.coords.lng);

                }

                fetch('/colaboraciones/formulario/registrar_vulnerable', {
                    method: 'POST',
                    body: formData,
                }).then(response => {
                    if (response.ok) {
                        Swal.fire({
                            icon: "success",
                            title: "Persona vulnerable registrada",
                            text: "La persona vulnerable ha sido registrada exitosamente",
                        }).then(() => {
                            window.location.href = '/persona_vulnerable';
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Ocurrió un error al registrar la persona vulnerable",
                        });
                    }
                }).catch(error => {
                    console.error("Error al registrar persona vulnerable:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Ocurrió un error al registrar la persona vulnerable",
                    });
                });


            } else {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Falta validación"
                })
            }


        }


        document.addEventListener('DOMContentLoaded', function () {
            // Referencias a los toggles y contenedores
            const toggleDireccion = document.getElementById('toggleDireccion');
            const domicilio_container = document.getElementById('domicilio_container');
            const toggleDocumento = document.getElementById('toggleDocumento');
            const documento_container = document.getElementById('documento_container');
            const togglePadre = document.getElementById('togglePadre');
            const select_padre_container = document.getElementById('select_padre_container');

            // Función para manejar los campos obligatorios
            function toggleRequired(toggle, fieldIds) {
                fieldIds.forEach(fieldId => {
                    const input = document.querySelector(`[name="${fieldId}"]`); // Asegurarse de seleccionar correctamente
                    if (input) {
                        if (toggle.checked) {
                            input.setAttribute('required', 'required');
                        } else {
                            input.removeAttribute('required');
                            input.value = ''; // Limpia el valor del campo
                        }
                    }
                });
            }

            // Eventos para el toggle de dirección
            toggleDireccion.addEventListener('change', function () {
                domicilio_container.style.display = this.checked ? 'block' : 'none';
                toggleRequired(this, ['calle', 'altura', 'localidad', 'provincia']);
                if (this.checked) {
                    setTimeout(() => {
                        map.invalidateSize();
                    }, 10);
                }
            });

            // Eventos para el toggle de documento
            toggleDocumento.addEventListener('change', function () {
                documento_container.style.display = this.checked ? 'block' : 'none';
                toggleRequired(this, ['tipo_docu', 'numero_docu']);
            });

            // Eventos para el toggle de padre
            togglePadre.addEventListener('change', function () {
                select_padre_container.style.display = this.checked ? 'block' : 'none';
                toggleRequired(this, ['padre_id']);
            });
        });


    </script>
{{/partial}}
{{> templates/colaboraciones/colaboraciones}}